1. Project setup:
    i.  create project:
            > django-admin startproject My_Ecom_Project

    ii. create virtual enviroment in CMD:
            python -m venv env
            env\Scripts\activate

    iii. create & install requirements.txt:
            > pip install -r requirements.txt
    
    iv. create folder: templates, media, static
        and add them in settings.py:

                TEMPLATES_DIR = os.path.join(BASE_DIR, 'templates')
                STATIC_DIR = os.path.join(BASE_DIR, 'static')
                MEDIA_DIR = os.path.join(BASE_DIR, 'media')

        
                'DIRS': [TEMPLATES_DIR, ],

                TIME_ZONE = 'Asia/Dhaka'



                STATIC_URL = '/static/'
                STATICFILES_DIR = [STATIC_DIR, ]

                MEDIA_ROOT = MEDIA_DIR
                MEDIA_URL = '/media/'

                LOGIN_URL = '/'


    v. crispy_forms at in settings.py:
            INSTALLED_APPS = [
                'crispy_forms',
        ]

        CRISPY_TEMPLATE_PACK = 'bootstrap4'


    vi. create app:
            > py manage.py startapp App_Login
            > py manage.py startapp App_Shop 
    
    vii. add them in settings.py:
            INSTALLED_APPS = [
                'App_Login',
                'App_Shop',
        ]
   
    viii. templates directory:
        create two folder:
                a. App_Login
                b. App_Shop


    ix. create base.html and navbar.html:


    x. create in static folder:  
        // here create file main.css

    
    xi. main urls.py:

                from django.urls import path, include

                # TO show media files
                from django.conf import settings
                from django.contrib.staticfiles.urls import static, staticfiles_urlpatterns


                urlpatterns += staticfiles_urlpatterns()
                urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


    xii. create urls.py in both apps:
        a. App_Login\urls.py:
                from django.urls import path

                app_name = 'App_Login'

                urlpatterns = [

                ]

        b.App_Shop\urls.py:
                from django.urls import path

                app_name = 'App_Shop'

                urlpatterns = [
                
                ]


    xiii. indicate them in main urls.py:
            path('', include('App_Shop.urls')),
            path('account/', include('App_Login.urls')),


2. App_Login\models.py
    // building model, rewrite:

                from django.db import models

                # To Create a Custom User Model and Admin Panel
                from django.contrib.auth.models import BaseUserManager, AbstractBaseUser, PermissionsMixin
                from django.utils.translation import ugettext_lazy


                # TO automatically created one to one objects
                from django.db.models.signals import post_save
                from django.dispatch import receiver


                # Create your models here.


                class MyUserManager(BaseUserManager):
                """ A custom Manage to deal with emails as unique identifer """

                        def _create_user(self, email, password, **extra_fields):
                                """ Creates and saves a user with a given email and password """

                                if not email:
                                raise ValueError("The Email must be set!")

                                email = self.normalize_email(email)
                                user = self.model(email=email, **extra_fields)
                                user.set_password(password)
                                user.save(using=self._db)
                                return user

                        """ Super user create """

                        def create_superuser(self, email, password, **extra_fields):
                                extra_fields.setdefault('is_staff', True)
                                extra_fields.setdefault('is_superuser', True)
                                extra_fields.setdefault('is_active', True)

                                if extra_fields.get('is_staff') is not True:
                                raise ValueError('Superuser must have is_staff=True')
                                if extra_fields.get('is_superuser') is not True:
                                raise ValueError('Superuser must have is_superuser=True')
                                return self._create_user(email, password, **extra_fields)


                """user models where we save user """


                class User(AbstractBaseUser, PermissionsMixin):
                        email = models.EmailField(unique=True, null=False)
                        is_staff = models.BooleanField(
                                ugettext_lazy('staff status'),
                                default=False,
                                help_text=ugettext_lazy(
                                'Designates whether the user can log in this site')
                        )

                        is_active = models.BooleanField(
                                ugettext_lazy('active'),
                                default=True,
                                help_text=ugettext_lazy(
                                'Designates whether this user should be trated as active. Unselect this instead of deleting accounts')
                        )

                        USERNAME_FIELD = 'email'
                        objects = MyUserManager()

                        # string replasentation
                        def __str__(self):
                                return self.email

                        def get_full_name(self):
                                return self.email

                        def get_short_name(self):
                                return self.email

                        """User model is ready """


                        class Profile(models.Model):
                        user = models.OneToOneField(
                                User, on_delete=models.CASCADE, related_name='profile')
                        username = models.CharField(max_length=264, blank=True)
                        full_name = models.CharField(max_length=264, blank=True)
                        address_1 = models.TextField(max_length=300, blank=True)
                        city = models.CharField(max_length=40, blank=True)
                        zipcode = models.CharField(max_length=10, blank=True)
                        country = models.CharField(max_length=50, blank=True)
                        phone = models.CharField(max_length=20, blank=True)
                        date_joined = models.DateTimeField(auto_now_add=True)

                        # when new user create, here profile automatically create_default_context

                        # string representation
                        def __str__(self):
                                return self.username + "'s Profile"

                        def is_fully_filled(self):
                                fields_names = [f.name for f in self._meta.get_fields()]

                                for field_name in fields_names:
                                value = getattr(self, field_name)
                                if value is None or value == '':
                                        return False
                                return True


                # when user create, then user model will automatically created and linked each other:


                @receiver(post_save, sender=User)
                def create_profile(sender, instance, created, **kwargs):
                if created:
                        Profile.objects.create(user=instance)


                @receiver(post_save, sender=User)
                def save_profile(sender, instance, **kwargs):
                instance.profile.save()






/ run now first time migration:


        ii. register model in App_Login\admin.py:
                from App_Login.models import User, Profile

                # Register your models here.

                admin.site.register(User)
                admin.site.register(Profile)


        iii. settings.py: // change user model
        # Custom user model
        AUTH_USER_MODEL = 'App_Login.User'


        iv. now run migration:
                > py manage.py makemigrations App_Login
                > py manage.py migrate


        v. now create a super user:
                > py manage.py createsuperuser
                        Email: asadujjaman255@gmail.com
                        Password: 1234
                        Password (again):
                        This password is too short. It must contain at least 8 characters.
                        This password is too common.
                        This password is entirely numeric.
                        Bypass password validation and create user anyway? [y/N]: y
                        Superuser created successfully.


// now login admin site:
> py manage.py runserver
http://127.0.0.1:8000/admin
        // here we can provide Username
                and see the changes


3. 
        i. create App_Login\forms.py:
        // Profile form, signup form:


                from dataclasses import field
                from django.forms import ModelForm
                from App_Login.models import User, Profile

                from django.contrib.auth.forms import UserCreationForm


                # forms

                class ProfileForm(ModelForm):
                class Meta:
                        model = Profile
                        exclude = ('user',)


                class SignUpForm(UserCreationForm):
                class Meta:
                        model = User
                        fields = ('email', 'password1', 'password2',)




        ii. App_Login\views.py:
        // sign up view, logout view, login view, user profile view


        iii. but first we set template before views:

                create in templates\App_Login: 
                        login.html, sign_up.html, change_profile.html 


                base.html:
                        {% load static %}
                        <!doctype html>
                        <html lang="en">
                        <head>
                        <!-- Required meta tags -->
                        <meta charset="utf-8">
                        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
                        <meta http-equiv-"X-UA-Compatible" content="ie=edge">

                        <!-- Bootstrap CSS -->
                        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">

                        <!-- Font Awesome-->
                        <script src="https://kit.fontawesome.com/71ddbaf830.js" crossorigin="anonymous"></script>
                        
                        <!-- Add our CSS -->
                        <link rel="stylesheet" href="{% static 'css/main.css' %}">

                        <title>{% block title_block %} E-com | Shop {% endblock%}</title>

                        </head>
                        <body>

                        <div class="container">
                                {% block body_block %}  {% endblock %}

                        </div>


                        
                        <script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
                        <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN" crossorigin="anonymous"></script>
                        <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.min.js" integrity="sha384-+sLIOodYLS7CIrQpBjl+C7nPvqq+FbNUBDunl/OZv93DB7Ln/533i8e/mZXLi/P+" crossorigin="anonymous"></script>
                        
                        </body>
                        </html>



        iv. now write view:
        // App_Login\views.py:

                from django.shortcuts import render, HttpResponseRedirect
                from django.urls import reverse

                # Authetication
                from django.contrib.auth.forms import AuthenticationForm
                from django.contrib.auth.decorators import login_required
                from django.contrib.auth import login, logout, authenticate

                # Forms and Models
                from App_Login.models import Profile
                from App_Login.forms import ProfileForm, SignUpForm


                # Create your views here.


                def sign_up(request):
                        form = SignUpForm()
                        if request.method == 'POST':
                                form = SignUpForm(request.POST)
                                if form.is_valid():
                                form.save()
                                return HttpResponseRedirect(reverse())

                        return render(request, 'App_Login/sign_up.html', context={'form': form})


        v. add it in urls.py:
                path('account/signup/', views.sign_up, name='signup'),




        vi. App_Login\views.py:
                def login_usser(request):
                        form = AuthenticationForm()
                        if request.method == 'POST':
                                form = AuthenticationForm(data=request.POST)
                                if form.is_valid():
                                username = form.cleaned_data.get('username')
                                password = form.cleaned_data.get('password')
                                user = authenticate(username=username,
                                                        password=password)  # authenticate
                                if user is not None:
                                        login(request, user)    # login koralam
                                        return HttpResponse('logged in')

                        return render(request, 'App_Login/login.html', context={'form': form})


        vii. redirect sign_up:
        // App_Login > views.py > sign_up:
            return HttpResponseRedirect(reverse('App_Login:login'))


        viii. App_Login\urls.py:
                path('account/login/', views.login_user, name='login'),


        // now create signup and login template:
        ix. templates\App_Login\sign_up.html:

                {% extends 'base.html' %}
                {% load crispy_forms_tags %}
                {% block title_block %} Create New Account {% endblock %}
                {% block body_block %}
                <h2>Create New Account: </h2>
                <form method="POST">
                {{ form|crispy }}
                {% csrf_token %}
                <button type="submit" class="btn btn-success btn-sm">Create Account</button>
                </form>
                <br>
                <p>Already have an account?<a href="{% url 'App_Login:login' %}">Login Here</a></p>
                {% endblock %}

        x. logout view:
        // App_Login\views.py:
                @login_required
                def logout_user(request):
                        logout(request)
                        return HttpResponse("Logged Out")

        xi. login template create:
        // templates\App_Login\login.html:

                {% extends 'base.html' %}
                {% load crispy_forms_tags %}
                {% block title_block %} Login {% endblock %}
                {% block body_block %}
                        <h2>Login:</h2>
                        <form method="POST">
                                {{form|crispy}}
                                {% csrf_token %}
                                <button type="submit" class="btn btn-primary btn-sm">Login</button>
                        </form>
                        <br>
                        <p>Doesn't have an account? <a href="{% url 'App_Login:signup' %}">Create new Account</a></p>
                {% endblock %}


        xii. logout urls:
        // App_Login\urls.py:
                path('account/logout/', views.logout_user, name='logout'),

4. 
        i. App_Login\urls.py:
        // remove accounts part:
                path('signup/', views.sign_up, name='signup'),
                path('login/', views.login_user, name='login'),
                path('logout', views.logout_user, name='logout'),



        ii. settings.py:
                LOGIN_URL = '/account/login'
                

        iii. test and run this urls:
        // run server & go
                http://127.0.0.1:8000/account/signup/

                // create account and login



        iv. Profile view:
        // App_Login\views.py:

                @login_required
                def user_profile(request):
                        profile = Profile.objects.get(user=request.user)

                        # generate form
                        form = ProfileForm(instance=profile)
                        if request.method == 'POST':
                                form = ProfileForm(request.POST, instance=profile)
                                if form.is_valid():
                                form.save()
                                form = ProfileForm(instance=profile)

                        return render(request, 'APp_Login/change_profile.html', context={'form': form})


        v. now define it, in urls.py:
                path('profile/', views.user_profile, name='profile'),

        vi. change_profile.html:
                {% extends 'base.html' %}
                {% load crispy_forms_tags %}
                {% block title_block %} Profile {% endblock %}
                {% block body_block %}

                <form method="POST">
                {{form|crispy}}
                {% csrf_token %}
                <button type="submit" class="btn btn-warning btn-sm">Save</button>
                </form>
                {% endblock %}


// working with message:

        vii. views.py:
from django.contrib import messages
// create message:
        sign_up:
            messages.success(request, "Account Created Successfully!")

        logout_user:
            messages.warning(request, "You are logged Out!!")

        user_profile:
            messages.success(request, "Changed Saved!!")


// now display message:
// we display at base.html:
        vii. base.html:

                <div class="container" style="padding-top: 15px">
                        <div class="messages container mt-2">
                                {% if messages %}
                                {% for message in messages%}
                                <div {% if message.tags %} class="alert alert-{{message.tags}}{% endif %}" role="alert">
                                        {{message}}
                                        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                </div>
                                {% endfor %}
                                {% endif %}
                        </div>
                        {% block body_block %}  {% endblock %}

                </div>


5. Now create App_Shop model:
        i. App_Shop\models.py:
                from django.db import models

                # Create your models here.


                class Category(models.Model):
                        title = models.CharField(max_length=20)
                        created = models.DateTimeField(auto_now_add=True)

                        def __str__(self):
                                return self.title

                        class Meta:
                                verbose_name_plural = "Categories"


                class Product(models.Model):
                        mainimage = models.ImageField(upload_to='Products')
                        name = models.CharField(max_length=254)
                        category = models.ForeignKey(
                                Category, on_delete=models.CASCADE, related_name='category')
                        preview_text = models.TextField(
                                max_length=200, verbose_name='Preview Text')
                        detail_text = models.TextField(max_length=1000, verbose_name='Description')
                        price = models.FloatField()
                        old_price = models.FloatField(default=0.00)
                        created = models.DateTimeField(auto_now_add=True)

                        def __str__(self):
                                return self.name

                        class Meta:
                                ordering = ['-created', ]


        ii. make migration:
                > py manage.py makemigrations App_Shop
                > py manage.py migrate 


        iii. register in App_Shop\admin.py:
                from App_Shop.models import Category, Product

                # Register your models here.

                admin.site.register(Category)
                admin.site.register(Product)

        

// product display, home view:
        iv. App_Shop\views.py:

                # Import Views
                from django.views.generic import ListView, DetailView

                # Models
                from App_Shop.models import Product

                # Create your views here.


                class Home(ListView):
                model = Product
                template_name = 'App_Shop/home.html'

        v. add in App_Shop\urls.py:
                path('', views.Home.as_view, name='home'),

        vi. create templates\App_Shop\home.html:


                {% extends 'base.html' %}
                {% block body_block %}

                {% for product in object_list %}

                        {{product.name}}

                {% endfor %}
                {% endblock %}



        vii. now we can change HttpResponse in App_Login\views:
        login_user:
                return HttpResponseRedirect(reverse('App_Shop:home'))

        logout_user:
                return HttpResponseRedirect(reverse('App_Shop:home'))



        viii.
// now login to the admin pannel and add some product:
        http://127.0.0.1:8000/admin
                Email: asadujjaman255@gmail.com
                Password: 1234

        // here add some category:

        // we add product, under those category, 

        now visit homepage, and see product title,

6. homepage fontend design:
        i. home.html:
                {% extends 'base.html' %}
                {% block body_block %}

                <div class="container my-5">
                <h2 class="my-5">Featured Products</h2>
                <div class="row">
                        {% for product in object_list %}
                        <div class="col-md-6 col-sm-12 col-lg-3">
                        <figure class="card card-product">
                                <div class="img-wrap">
                                <img src="/media/{{product.mainimage}}" style="width:100%; height:300px;">
                                
                                </div>
                                <figcaption class="info-wrap">
                                <h6 class="title"><a href="#">{{product.name}}</a></h6>
                                <div class="action-wrap">
                                        <div class="price-wrap h5">
                                        <span class="price-new">&#2547; {{product.price|floatformat:2}}</span>
                                        <span class="price-old"><strike>&#2547; {{product.old_price|floatformat:2}}</strike></span>
                                        </div>
                                </div>
                                </figcaption>
                        </figure>
                        </div>
                        {% endfor %}        
                </div>
                </div>


                {% endblock %}



        ii. base.html, CSS code add:


                <style>
                .card {
                        height: 350px;
                }

                .card-product:after {
                        content: "";
                        display: table;
                        clear: both;
                        visibility: hidden;
                }

                .card-product .price-new, .card-product .price {
                        margin-right: 5px;
                }

                .card-product .price-old {
                        color: #999;
                }

                .card-product .img-wrap {
                        border-radius: 3px 3px 0 0;
                        overflow: hidden;
                        position: relative;
                        height: 220px;
                        text-align: center;
                }

                .card-product .img-wrap img {
                        max-height: 100%;
                        max-width: 100%;
                        object_fit: cover;
                }

                .card-product .info-wrap {
                        overflow: hidden;
                        padding: 15px;
                        border-top: 1px solid #eee;
                }

                .card-product .action-wrap {
                        padding-top: 4px;
                        margin-top: 4px;
                }

                .card-product .button-wrap {
                        padding: 15px;
                        border-top: 1px solid #eee;
                }

                .card-product .title {
                        margin-top: 0px;
                }

                </style>



        iii. navbar.html:

                <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
                        <div class="container">
                                <a class="navbar-brand" href="{% url 'App_Shop:home' %}">Django E-commerce Project</a>
                                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                                        <span class="navbar-toggler-icon"></span>
                                </button>
                        </div>
                </nav>


        iv. base.html:
                {% include 'navbar.html' %}


        v. add link in navbar.html:
                <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="container">
                        <a class="navbar-brand" href="{% url 'App_Shop:home' %}">Django E-commerce Project</a>
                        <button type="button" class="navbar-toggler" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                        </button>
                        <div class="collapse navbar-collapse" id="navbarNav">
                        <ul class="navbar-nav ml-auto">
                                {% if request.user.is_authenticated %}
                                <li class="nav-item">
                                <a href="#" class="nav-link">
                                        <i class="fas fa-shopping-cart"></i> Cart
                                </a>
                                </li>
                                <li class="nav-item dropdown">
                                <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        <i class="fas fa-user-tie"></i> {{request.user.profile.username}}
                                </a>
                                <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                                        <a class="dropdown-item" href="{% url 'App_Login:profile' %}">Profile</a>
                                        <a class="dropdown-item">Orders</a>
                                        <div class="dropdown-divider">
                                        </div>
                                        <a class="dropdown-item" href="{% url 'App_Login:logout' %}">Logout</a>
                                </div>
                                </li>
                                {% else %}
                                <li class="nav-item">
                                <a href="{% url 'App_Login:login' %}" class="btn btn-primary">Login</a>
                                </li>
                                {% endif %}
                        </ul>
                        </div>
                </div>
                </nav>


