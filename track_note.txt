1. Project setup:
    i.  create project:
            > django-admin startproject My_Ecom_Project

    ii. create virtual environment in CMD: (goto 1554 line)
            python -m venv env
            env\Scripts\activate

    iii. create & install requirements.txt:
            > pip install -r requirements.txt
    
    iv. create folder: templates, media, static
        and add them in settings.py:

                TEMPLATES_DIR = os.path.join(BASE_DIR, 'templates')
                STATIC_DIR = os.path.join(BASE_DIR, 'static')
                MEDIA_DIR = os.path.join(BASE_DIR, 'media')

        
                'DIRS': [TEMPLATES_DIR, ],

                TIME_ZONE = 'Asia/Dhaka'



                STATIC_URL = '/static/'
                STATICFILES_DIR = [STATIC_DIR, ]

                MEDIA_ROOT = MEDIA_DIR
                MEDIA_URL = '/media/'

                LOGIN_URL = '/'


    v. crispy_forms at in settings.py:
            INSTALLED_APPS = [
                'crispy_forms',
        ]

        CRISPY_TEMPLATE_PACK = 'bootstrap4'


    vi. create app:
            > py manage.py startapp App_Login
            > py manage.py startapp App_Shop 
    
    vii. add them in settings.py:
            INSTALLED_APPS = [
                'App_Login',
                'App_Shop',
        ]
   
    viii. templates directory:
        create two folder:
                a. App_Login
                b. App_Shop


    ix. create base.html and navbar.html:


    x. create in static folder:  
        // here create file main.css

    
    xi. main urls.py:

                from django.urls import path, include

                # TO show media files
                from django.conf import settings
                from django.contrib.staticfiles.urls import static, staticfiles_urlpatterns


                urlpatterns += staticfiles_urlpatterns()
                urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


    xii. create urls.py in both apps:
        a. App_Login\urls.py:
                from django.urls import path

                app_name = 'App_Login'

                urlpatterns = [

                ]

        b.App_Shop\urls.py:
                from django.urls import path

                app_name = 'App_Shop'

                urlpatterns = [
                
                ]


    xiii. indicate them in main urls.py:
            path('', include('App_Shop.urls')),
            path('account/', include('App_Login.urls')),


2. App_Login\models.py
    // building model, rewrite:

                from django.db import models

                # To Create a Custom User Model and Admin Panel
                from django.contrib.auth.models import BaseUserManager, AbstractBaseUser, PermissionsMixin
                from django.utils.translation import ugettext_lazy


                # TO automatically created one to one objects
                from django.db.models.signals import post_save
                from django.dispatch import receiver


                # Create your models here.


                class MyUserManager(BaseUserManager):
                """ A custom Manage to deal with emails as unique identifer """

                        def _create_user(self, email, password, **extra_fields):
                                """ Creates and saves a user with a given email and password """

                                if not email:
                                raise ValueError("The Email must be set!")

                                email = self.normalize_email(email)
                                user = self.model(email=email, **extra_fields)
                                user.set_password(password)
                                user.save(using=self._db)
                                return user

                        """ Super user create """

                        def create_superuser(self, email, password, **extra_fields):
                                extra_fields.setdefault('is_staff', True)
                                extra_fields.setdefault('is_superuser', True)
                                extra_fields.setdefault('is_active', True)

                                if extra_fields.get('is_staff') is not True:
                                raise ValueError('Superuser must have is_staff=True')
                                if extra_fields.get('is_superuser') is not True:
                                raise ValueError('Superuser must have is_superuser=True')
                                return self._create_user(email, password, **extra_fields)


                """user models where we save user """


                class User(AbstractBaseUser, PermissionsMixin):
                        email = models.EmailField(unique=True, null=False)
                        is_staff = models.BooleanField(
                                ugettext_lazy('staff status'),
                                default=False,
                                help_text=ugettext_lazy(
                                'Designates whether the user can log in this site')
                        )

                        is_active = models.BooleanField(
                                ugettext_lazy('active'),
                                default=True,
                                help_text=ugettext_lazy(
                                'Designates whether this user should be trated as active. Unselect this instead of deleting accounts')
                        )

                        USERNAME_FIELD = 'email'
                        objects = MyUserManager()

                        # string replasentation
                        def __str__(self):
                                return self.email

                        def get_full_name(self):
                                return self.email

                        def get_short_name(self):
                                return self.email

                        """User model is ready """


                        class Profile(models.Model):
                        user = models.OneToOneField(
                                User, on_delete=models.CASCADE, related_name='profile')
                        username = models.CharField(max_length=264, blank=True)
                        full_name = models.CharField(max_length=264, blank=True)
                        address_1 = models.TextField(max_length=300, blank=True)
                        city = models.CharField(max_length=40, blank=True)
                        zipcode = models.CharField(max_length=10, blank=True)
                        country = models.CharField(max_length=50, blank=True)
                        phone = models.CharField(max_length=20, blank=True)
                        date_joined = models.DateTimeField(auto_now_add=True)

                        # when new user create, here profile automatically create_default_context

                        # string representation
                        def __str__(self):
                                return self.username + "'s Profile"

                        def is_fully_filled(self):
                                fields_names = [f.name for f in self._meta.get_fields()]

                                for field_name in fields_names:
                                value = getattr(self, field_name)
                                if value is None or value == '':
                                        return False
                                return True


                # when user create, then user model will automatically created and linked each other:


                @receiver(post_save, sender=User)
                def create_profile(sender, instance, created, **kwargs):
                if created:
                        Profile.objects.create(user=instance)


                @receiver(post_save, sender=User)
                def save_profile(sender, instance, **kwargs):
                instance.profile.save()






/ run now first time migration:


        ii. register model in App_Login\admin.py:
                from App_Login.models import User, Profile

                # Register your models here.

                admin.site.register(User)
                admin.site.register(Profile)


        iii. settings.py: // change user model
        # Custom user model
        AUTH_USER_MODEL = 'App_Login.User'


        iv. now run migration:
                > py manage.py makemigrations App_Login
                > py manage.py migrate


        v. now create a super user:
                > py manage.py createsuperuser
                        Email: asadujjaman255@gmail.com
                        Password: 1234
                        Password (again):
                        This password is too short. It must contain at least 8 characters.
                        This password is too common.
                        This password is entirely numeric.
                        Bypass password validation and create user anyway? [y/N]: y
                        Superuser created successfully.


// now login admin site:
> py manage.py runserver
http://127.0.0.1:8000/admin
        // here we can provide Username
                and see the changes


3. 
        i. create App_Login\forms.py:
        // Profile form, signup form:


                from dataclasses import field
                from django.forms import ModelForm
                from App_Login.models import User, Profile

                from django.contrib.auth.forms import UserCreationForm


                # forms

                class ProfileForm(ModelForm):
                class Meta:
                        model = Profile
                        exclude = ('user',)


                class SignUpForm(UserCreationForm):
                class Meta:
                        model = User
                        fields = ('email', 'password1', 'password2',)




        ii. App_Login\views.py:
        // sign up view, logout view, login view, user profile view


        iii. but first we set template before views:

                create in templates\App_Login: 
                        login.html, sign_up.html, change_profile.html 


                base.html:
                        {% load static %}
                        <!doctype html>
                        <html lang="en">
                        <head>
                        <!-- Required meta tags -->
                        <meta charset="utf-8">
                        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
                        <meta http-equiv-"X-UA-Compatible" content="ie=edge">

                        <!-- Bootstrap CSS -->
                        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">

                        <!-- Font Awesome-->
                        <script src="https://kit.fontawesome.com/71ddbaf830.js" crossorigin="anonymous"></script>
                        
                        <!-- Add our CSS -->
                        <link rel="stylesheet" href="{% static 'css/main.css' %}">

                        <title>{% block title_block %} E-com | Shop {% endblock%}</title>

                        </head>
                        <body>

                        <div class="container">
                                {% block body_block %}  {% endblock %}

                        </div>


                        
                        <script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
                        <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN" crossorigin="anonymous"></script>
                        <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.min.js" integrity="sha384-+sLIOodYLS7CIrQpBjl+C7nPvqq+FbNUBDunl/OZv93DB7Ln/533i8e/mZXLi/P+" crossorigin="anonymous"></script>
                        
                        </body>
                        </html>



        iv. now write view:
        // App_Login\views.py:

                from django.shortcuts import render, HttpResponseRedirect
                from django.urls import reverse

                # Authetication
                from django.contrib.auth.forms import AuthenticationForm
                from django.contrib.auth.decorators import login_required
                from django.contrib.auth import login, logout, authenticate

                # Forms and Models
                from App_Login.models import Profile
                from App_Login.forms import ProfileForm, SignUpForm


                # Create your views here.


                def sign_up(request):
                        form = SignUpForm()
                        if request.method == 'POST':
                                form = SignUpForm(request.POST)
                                if form.is_valid():
                                form.save()
                                return HttpResponseRedirect(reverse())

                        return render(request, 'App_Login/sign_up.html', context={'form': form})


        v. add it in urls.py:
                path('account/signup/', views.sign_up, name='signup'),




        vi. App_Login\views.py:
                def login_usser(request):
                        form = AuthenticationForm()
                        if request.method == 'POST':
                                form = AuthenticationForm(data=request.POST)
                                if form.is_valid():
                                username = form.cleaned_data.get('username')
                                password = form.cleaned_data.get('password')
                                user = authenticate(username=username,
                                                        password=password)  # authenticate
                                if user is not None:
                                        login(request, user)    # login koralam
                                        return HttpResponse('logged in')

                        return render(request, 'App_Login/login.html', context={'form': form})


        vii. redirect sign_up:
        // App_Login > views.py > sign_up:
            return HttpResponseRedirect(reverse('App_Login:login'))


        viii. App_Login\urls.py:
                path('account/login/', views.login_user, name='login'),


        // now create signup and login template:
        ix. templates\App_Login\sign_up.html:

                {% extends 'base.html' %}
                {% load crispy_forms_tags %}
                {% block title_block %} Create New Account {% endblock %}
                {% block body_block %}
                <h2>Create New Account: </h2>
                <form method="POST">
                {{ form|crispy }}
                {% csrf_token %}
                <button type="submit" class="btn btn-success btn-sm">Create Account</button>
                </form>
                <br>
                <p>Already have an account?<a href="{% url 'App_Login:login' %}">Login Here</a></p>
                {% endblock %}

        x. logout view:
        // App_Login\views.py:
                @login_required
                def logout_user(request):
                        logout(request)
                        return HttpResponse("Logged Out")

        xi. login template create:
        // templates\App_Login\login.html:

                {% extends 'base.html' %}
                {% load crispy_forms_tags %}
                {% block title_block %} Login {% endblock %}
                {% block body_block %}
                        <h2>Login:</h2>
                        <form method="POST">
                                {{form|crispy}}
                                {% csrf_token %}
                                <button type="submit" class="btn btn-primary btn-sm">Login</button>
                        </form>
                        <br>
                        <p>Doesn't have an account? <a href="{% url 'App_Login:signup' %}">Create new Account</a></p>
                {% endblock %}


        xii. logout urls:
        // App_Login\urls.py:
                path('account/logout/', views.logout_user, name='logout'),

4. 
        i. App_Login\urls.py:
        // remove accounts part:
                path('signup/', views.sign_up, name='signup'),
                path('login/', views.login_user, name='login'),
                path('logout', views.logout_user, name='logout'),



        ii. settings.py:
                LOGIN_URL = '/account/login'
                

        iii. test and run this urls:
        // run server & go
                http://127.0.0.1:8000/account/signup/

                // create account and login



        iv. Profile view:
        // App_Login\views.py:

                @login_required
                def user_profile(request):
                        profile = Profile.objects.get(user=request.user)

                        # generate form
                        form = ProfileForm(instance=profile)
                        if request.method == 'POST':
                                form = ProfileForm(request.POST, instance=profile)
                                if form.is_valid():
                                form.save()
                                form = ProfileForm(instance=profile)

                        return render(request, 'APp_Login/change_profile.html', context={'form': form})


        v. now define it, in urls.py:
                path('profile/', views.user_profile, name='profile'),

        vi. change_profile.html:
                {% extends 'base.html' %}
                {% load crispy_forms_tags %}
                {% block title_block %} Profile {% endblock %}
                {% block body_block %}

                <form method="POST">
                {{form|crispy}}
                {% csrf_token %}
                <button type="submit" class="btn btn-warning btn-sm">Save</button>
                </form>
                {% endblock %}


// working with message:

        vii. views.py:
from django.contrib import messages
// create message:
        sign_up:
            messages.success(request, "Account Created Successfully!")

        logout_user:
            messages.warning(request, "You are logged Out!!")

        user_profile:
            messages.success(request, "Changed Saved!!")


// now display message:
// we display at base.html:
        vii. base.html:

                <div class="container" style="padding-top: 15px">
                        <div class="messages container mt-2">
                                {% if messages %}
                                {% for message in messages%}
                                <div {% if message.tags %} class="alert alert-{{message.tags}}{% endif %}" role="alert">
                                        {{message}}
                                        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                </div>
                                {% endfor %}
                                {% endif %}
                        </div>
                        {% block body_block %}  {% endblock %}

                </div>


5. Now create App_Shop model:
        i. App_Shop\models.py:
                from django.db import models

                # Create your models here.


                class Category(models.Model):
                        title = models.CharField(max_length=20)
                        created = models.DateTimeField(auto_now_add=True)

                        def __str__(self):
                                return self.title

                        class Meta:
                                verbose_name_plural = "Categories"


                class Product(models.Model):
                        mainimage = models.ImageField(upload_to='Products')
                        name = models.CharField(max_length=254)
                        category = models.ForeignKey(
                                Category, on_delete=models.CASCADE, related_name='category')
                        preview_text = models.TextField(
                                max_length=200, verbose_name='Preview Text')
                        detail_text = models.TextField(max_length=1000, verbose_name='Description')
                        price = models.FloatField()
                        old_price = models.FloatField(default=0.00)
                        created = models.DateTimeField(auto_now_add=True)

                        def __str__(self):
                                return self.name

                        class Meta:
                                ordering = ['-created', ]


        ii. make migration:
                > py manage.py makemigrations App_Shop
                > py manage.py migrate 


        iii. register in App_Shop\admin.py:
                from App_Shop.models import Category, Product

                # Register your models here.

                admin.site.register(Category)
                admin.site.register(Product)

        

// product display, home view:
        iv. App_Shop\views.py:

                # Import Views
                from django.views.generic import ListView, DetailView

                # Models
                from App_Shop.models import Product

                # Create your views here.


                class Home(ListView):
                model = Product
                template_name = 'App_Shop/home.html'

        v. add in App_Shop\urls.py:
                path('', views.Home.as_view, name='home'),

        vi. create templates\App_Shop\home.html:


                {% extends 'base.html' %}
                {% block body_block %}

                {% for product in object_list %}

                        {{product.name}}

                {% endfor %}
                {% endblock %}



        vii. now we can change HttpResponse in App_Login\views:
        login_user:
                return HttpResponseRedirect(reverse('App_Shop:home'))

        logout_user:
                return HttpResponseRedirect(reverse('App_Shop:home'))



        viii.
// now login to the admin pannel and add some product:
        http://127.0.0.1:8000/admin
                Email: asadujjaman255@gmail.com
                Password: 1234

        // here add some category:

        // we add product, under those category, 

        now visit homepage, and see product title,

6. homepage fontend design:
        i. home.html:
                {% extends 'base.html' %}
                {% block body_block %}

                <div class="container my-5">
                <h2 class="my-5">Featured Products</h2>
                <div class="row">
                        {% for product in object_list %}
                        <div class="col-md-6 col-sm-12 col-lg-3">
                        <figure class="card card-product">
                                <div class="img-wrap">
                                <img src="/media/{{product.mainimage}}" style="width:100%; height:300px;">
                                
                                </div>
                                <figcaption class="info-wrap">
                                <h6 class="title"><a href="#">{{product.name}}</a></h6>
                                <div class="action-wrap">
                                        <div class="price-wrap h5">
                                        <span class="price-new">&#2547; {{product.price|floatformat:2}}</span>
                                        <span class="price-old"><strike>&#2547; {{product.old_price|floatformat:2}}</strike></span>
                                        </div>
                                </div>
                                </figcaption>
                        </figure>
                        </div>
                        {% endfor %}        
                </div>
                </div>


                {% endblock %}



        ii. base.html, CSS code add:


                <style>
                .card {
                        height: 350px;
                }

                .card-product:after {
                        content: "";
                        display: table;
                        clear: both;
                        visibility: hidden;
                }

                .card-product .price-new, .card-product .price {
                        margin-right: 5px;
                }

                .card-product .price-old {
                        color: #999;
                }

                .card-product .img-wrap {
                        border-radius: 3px 3px 0 0;
                        overflow: hidden;
                        position: relative;
                        height: 220px;
                        text-align: center;
                }

                .card-product .img-wrap img {
                        max-height: 100%;
                        max-width: 100%;
                        object_fit: cover;
                }

                .card-product .info-wrap {
                        overflow: hidden;
                        padding: 15px;
                        border-top: 1px solid #eee;
                }

                .card-product .action-wrap {
                        padding-top: 4px;
                        margin-top: 4px;
                }

                .card-product .button-wrap {
                        padding: 15px;
                        border-top: 1px solid #eee;
                }

                .card-product .title {
                        margin-top: 0px;
                }

                </style>



        iii. navbar.html:

                <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
                        <div class="container">
                                <a class="navbar-brand" href="{% url 'App_Shop:home' %}">Django E-commerce Project</a>
                                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                                        <span class="navbar-toggler-icon"></span>
                                </button>
                        </div>
                </nav>


        iv. base.html:
                {% include 'navbar.html' %}


        v. add link in navbar.html:
                <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="container">
                        <a class="navbar-brand" href="{% url 'App_Shop:home' %}">Django E-commerce Project</a>
                        <button type="button" class="navbar-toggler" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                        </button>
                        <div class="collapse navbar-collapse" id="navbarNav">
                        <ul class="navbar-nav ml-auto">
                                {% if request.user.is_authenticated %}
                                <li class="nav-item">
                                <a href="#" class="nav-link">
                                        <i class="fas fa-shopping-cart"></i> Cart
                                </a>
                                </li>
                                <li class="nav-item dropdown">
                                <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        <i class="fas fa-user-tie"></i> {{request.user.profile.username}}
                                </a>
                                <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                                        <a class="dropdown-item" href="{% url 'App_Login:profile' %}">Profile</a>
                                        <a class="dropdown-item">Orders</a>
                                        <div class="dropdown-divider">
                                        </div>
                                        <a class="dropdown-item" href="{% url 'App_Login:logout' %}">Logout</a>
                                </div>
                                </li>
                                {% else %}
                                <li class="nav-item">
                                <a href="{% url 'App_Login:login' %}" class="btn btn-primary">Login</a>
                                </li>
                                {% endif %}
                        </ul>
                        </div>
                </div>
                </nav>


7. Product details page:
        i. create product_detail.html in App_Shop

        ii. App_Shop\views.py:

                class ProductDetail(DetailView, LoginRequiredMixin):
                        model = Product
                        template_name = 'App_Shop/product_detail.html'

        iii. App_Shop\urls.py:
                path('product/<pk>/', views.ProductDetail.as_view(), name='product_detail'),


        iv. home.html:
                    <h6 class="title"><a href="{% url 'App_Shop:product_detail' pk=product.pk %}">{{product.name}}</a></h6>


// design product detail template
        v. product_detail.html:
                {% extends 'base.html' %}
                {% block body_block %}
                {{object.name}}

                {% endblock %}

        v. main.css:

                .gallery-wrap .img-big-wrap img {
                height: 450px;
                width: auto;
                display: inline-block;
                cursor: zoom-in;
                }

                .gallery_wrap .img-small-wrap .item-gallery {
                width: 60px;
                height: 60px;
                border: 1px solid #ddd;
                margin: 7px 2px;
                display: inline;
                overflow: hidden;
                }

                .gallery_wrap .img-small-wrap {
                text-align: center;
                }

                .gallery-wrap .img-small-wrap img {
                max-width: 100%;
                max-height: 100%;
                object-fit: cover;
                border-radius: 4px;
                cursor: zoom-in;
                }


        vi. product_detail.html:

                {% extends 'base.html' %}
                {% block body_block %}
                <div class="container my-5">
                        <div class="card">
                        <div class="row">
                                <aside class="col-sm-5 border-right">
                                <article class="gallery-wrap">
                                        <div class="img-big-wrap">
                                        <div>
                                                <a href="#">
                                                <img src="/media/{{object.mainimage}}" style="width:450px">
                                                </a>
                                        </div>
                                        </div>
                                </article>
                                </aside>
                                <aside class="col-sm-7">
                                <article class="card-body p-5">
                                        <h3 class="title mp-3">{{object.name}}</h3>
                                        <p class="price-detail-wrap">
                                        <span class="price h3 text-warning">
                                                <span class="currency">BDT &#2547;</span><span class="num">{{object.price}}</span>
                                        </span>
                                        </p>
                                        <dl class="item-property">
                                        <dt>Description</dt>
                                        <dd>
                                                <p>{{object.detail_text|linebreaks}}</p>
                                        </dd>
                                        </dl>
                                        <a href="#" class="btn btn-lg btn-outline-primary text-uppercase">
                                        <i class="fas fa-shopping-cart"></i> Add to Cart
                                        </a>
                                </article>
                                </aside>
                        </div>
                        </div>
                </div>
                {% endblock %}


8. create new app: App_Order
(handle cart item and order item)
        i. > py manage.py startapp App_Order

        ii. add this app in settings.py

        iii. create App_Order folder in templates


        iv. create urls.py in App_Order

        v. indicate in main urls.py:
            path('shop/', include('App_Order.urls')),

        vi. order's urls.py:
                from django.urls import path

                app_name = 'App_Order'


                urlpatterns = [
                
                ]

        // model design:
        vii. App_Order\models.py:
                from django.db import models
                from django.conf import settings

                # Model
                from App_Shop.models import Product

                # Create your models here.


                class Cart(models.Model):
                        user = models.ForeignKey(settings.AUTH_USER_MODEL,
                                                on_delete=models.CASCADE, related_name="cart")
                        item = models.ForeignKey(
                                Product, on_delete=models.CASCADE)
                        quantity = models.IntegerField(default=1)
                        purchased = models.BooleanField(default=False)
                        created = models.DateTimeField(auto_now_add=True)
                        updated = models.DateTimeField(auto_now=True)

                        def __str__(self):
                                return f'{self.quantity} X {self.item}'

                        def get_total(self):
                                total = self.item.price * self.quantity
                                float_total = format(total, '0.2f')
                                return float_total


                class Order(models.Model):
                        orderitems = models.ManyToManyField(Cart)
                        user = models.ForeignKey(settings.AUTH_USER_MODEL,
                                                on_delete=models.CASCADE)
                        ordered = models.BooleanField(default=False)
                        created = models.DateTimeField(auto_now_add=True)
                        paymentId = models.CharField(max_length=264, blank=True, null=True)
                        orderId = models.CharField(max_length=200, blank=True, null=True)

                        def get_totals(self):
                                total = 0
                                for order_item in self.orderitems.all():
                                total += float(order_item.get_total())

                                return total


        vii. now run migration:
                > py manage.py makemigrations App_Order
                > py manage.py migrate

        viii. admin.py:
                from App_Order.models import Cart, Order

                # Register your models here.

                admin.site.register(Cart)
                admin.site.register(Order)
        
        // admin diye item add korle kaj hobe na, CZ Cart er shate Order e te o add korte hobe,
        // ja view diye korbo


9. write a view for add item in Cart:
        i. App_Order\views.py:
                from django.shortcuts import render, get_object_or_404, redirect

                # Authentications
                from django.contrib.auth.decorators import login_required

                # Model
                from App_Order.models import Cart, Order

                from App_Shop.models import Product

                # Messages
                from django.contrib import messages


                # Create your views here.

                @login_required
                def add_to_cart(request, pk):
                item = get_object_or_404(Product, pk=pk)
                order_item = Cart.objects.get_or_create(
                        item=item, user=request.user, purchased=False)
                order_qs = Order.objects.filter(user=request.user, ordered=False)
                if order_qs.exists():
                        order = order_qs[0]
                        if order.orderitems.filter(item=item).exists():
                        order_item[0].quantity += 1
                        order_item[0].save()
                        messages.info(request, "THis item quantuty was updated.")
                        return redirect("App_Shop:home")
                        else:
                        order.orderitems.add(order_item[0])
                        messages.info(request, "THis item was added to your cart.")
                        return redirect("App_Shop:home")
                else:
                        order = Order(user=request.user)
                        order.save()
                        order.orderitems.add(order_item[0])
                        messages.info(request, "This item was added to your  cart.")
                        return redirect("App_Shop:home")


        ii. App_Order\urls.py:
                path('add/<pk>/', views.add_to_cart, name="add"),

now it call from product_detail.html:
        iii. product_detail.html:

                <a href="{% url 'App_Order:add' pk=object.pk %}" class="btn btn-lg btn-outline-primary text-uppercase">
                        <i class="fas fa-shopping-cart"></i> Add to Cart
                </a>



10. cart item view:
        i. App_Order\views.py:
                @login_required
                def cart_view(request):
                        carts = Cart.objects.filter(user=request.user, purchased=False)
                        orders = Order.objects.filter(user=request.user, ordered=False)
                        if carts.exists() and orders.exists():
                                order = orders[0]
                                return render(request, 'App_Order/cart.html', context={'carts': carts, 'order': order})
                        else:
                                messages.warning(request, "You don't have any item in your cart!")
                                return redirect("App_Shop:home")

        ii. create App_Order\cart.html:
        iii. add it in urls.py:
                path('cart/', views.cart_view, name="cart"),

        iv. cart.html:
                {% extends 'base.html' %}
                {% block body_block %}
                <div class="container my-5">
                <div class="my-5">
                        <h2>Your Cart</h2>
                </div>
                <table class="tale table-hover">
                        <thead>
                        <tr>
                                <th scope="col" width="15%">#</th>
                                <th scope="col" width="15%">Product Name</th>
                                <th scope="col" width="15%">Quantity</th>
                                <th scope="col" width="15%" align="right">Price</th>
                                <th scope="col" width="15%">Remove</th>
                        </tr>
                        </thead>
                        <tbody>
                        {% for cart in carts %}
                        <tr>
                                <th scope="row">{{ forloop.counter }}</th>
                                <td>{{cart.item.name}}</td>
                                <td>
                                <a href="#" class="mr-2"><span class="badge badge-light">
                                        <i class="fas fa-minus"</i>
                                </span></a>
                                {{ cart.quantity }}
                                <a href="#" class="mr-2"><span class="badge badge-light">
                                        <i class="fas fa-plus"</i>
                                </span></a>
                                </td>
                                <td align="right">&#2547; {{cart.get_total}}</td>
                        </tr>
                        {% endfor %}
                        <tr>
                                <th scope="row"></th>
                                <td colspan="3">Total</td>
                                <td align="right">&#2547; {{order.get_totals | floatformat:2 }}</td>
                        </tr>
                        </tbody>
                </table>
                </div>

                {% endblock %}



        // cart e jabo navbar diye:
        v. templates > navbar.html:
                <li class="nav-item">
                        <a href="{% url 'App_Order:cart' %}" class="nav-link">
                                <i class="fas fa-shopping-cart"></i> Cart
                        </a>
                </li>
        

        vi. cart.html > table > tbody:
            <tr>
                <th scope="row"></th>
                <td colspan="4" class="text-right">
                    <a href="{% url 'App_Shop:home' %}" class="btn btn-warning mr-4">Continue Shoping</a>
                    <a href="#" class="btn btn-success mr-4">Procced To Checkout</a>
                </td>
            </tr>




//cart e koyta item asay, ta navbar cart er shate dekhabe;
// er jonno CUSTOM filter likbo;
// eta jekono jaygay likte pari, App_Order e likbo;
        vii. create a 'templatetags' folder in App_Order:
                here 2 file:
                        __init__.py
                        cart_tag.py


        viii. cart_tag.py:
                from django import template
                from App_Order.models import Order

                register = template.Library()


                @register.filter
                def cart_total(user):
                        order = Order.objects.filter(user=user, ordered=False)
                        
                        if order.exists():
                                return order[0].orderitems.count()
                        else:
                                return 0




        iv. navbar.html:
        {% load cart_tag %}

       // cart.html > table > tbody:
                <li class="nav-item">
                          <a href="{% url 'App_Order:cart' %}" class="nav-link">
                                  <i class="fas fa-shopping-cart"></i> Cart
                                  <span class="badge badge-light">{{ request.user | cart_total }}</span>
                           </a>
                </li>





11. view for cart item remove:
        i. App_Order\views.py:

                @login_required
                def remove_form_cart(request, pk):
                        item = get_object_or_404(Product, pk=pk)
                        order_qs = Order.objects.filter(user=request.user, ordered=False)
                        if order_qs.exists():
                                order = order_qs[0]
                                if order.orderitems.filter(item=item).exists():
                                        #order_item = Cart.objects.filter(item=item, user=request.user, purchased=False)
                                        #order_item = order_item[0]
                                        order_item = Cart.objects.filter(
                                                item=item, user=request.user, purchased=False)[0]
                                        order.orderitems.remove(order_item)
                                        order_item.delete()
                                        messages.warning(request, "This item was removed from youe cart")
                                        return redirect("App_Order:cart")
                                else:
                                        messages.info(request, "This item was not in your cart.")
                                        return redirect("App_Shop:home")
                        else:
                                messages.info(request, "You don;t have an active order")
                                return redirect("App_Shop:home")


        ii. templates\App_Order\cart.html > table > tbody > tr:
                <td><a href="{% url 'App_Order:remove' pk=cart.item.pk %}" class="btn btn-danger btn-sm">Remove From Cart</a></td>


        iii. urls.py:
                path('remove/<pk>/', views.remove_form_cart, name="remove"),


// Quantity plus-minus:

        iv: App_Order\views.py:
@login_required
def increase_cart(request, pk):
    item = get_object_or_404(Product, pk=pk)
    order_qs = Order.objects.filter(user=request.user, ordered=False)
    if order_qs.exists():
        order = order_qs[0]
        if order.orderitems.filter(item=item).exists():
            order_item = Cart.objects.filter(
                item=item, user=request.user, purchased=False)[0]
            if order_item.quantity >= 1:
                order_item.quantity += 1
                order_item.save()
                messages.info(
                    request, f"{item.name} quantity has been updated")
                return redirect("App_Order:cart")
        else:
            messages.info(request, f"{item.name} is not in your cart")
            return redirect("App_Shop:home")
    else:
        messages.info(request, "You don't have an active order")
        return redirect("App_Shop:home")


@login_required
def decrease_cart(request, pk):
    item = get_object_or_404(Product, pk=pk)
    order_qs = Order.objects.filter(user=request.user, ordered=False)
    if order_qs.exists():
        order = order_qs[0]
        if order.orderitems.filter(item=item).exists():
            order_item = Cart.objects.filter(
                item=item, user=request.user, purchased=False)[0]
            if order_item.quantity > 1:
                order_item.quantity -= 1
                order_item.save()
                messages.info(
                    request, f"{item.name} quantity has been updated")
                return redirect("App_Order:cart")

            else:
                order.orderitems.remove(order_item)
                order_item.delete()
                messages.warning(
                    request, f"{item.name} item has been removed from your cart")
                return redirect("App_Order:cart")
        else:
            messages.info(request, f"{item.name} is not in your cart")
            return redirect("App_Shop:home")
    else:
        messages.info(request, "You don't have an active order")
        return redirect("App_Shop:home")




        v. urls pattern define:
        // App_Order\urls.py:  
                path('increase/<pk>/', views.increase_cart, name="increase"),
                path('decrease/<pk>/', views.decrease_cart, name='decrease'),


        vi. now add them in plus-minus urls:
        // cart.html > table > tbody > tr:

                <td>
                    <a href="{% url 'App_Order:decrease' pk=cart.item.pk %}" class="mr-2"><span class="badge badge-light">
                        <i class="fas fa-minus"></i>
                    </span></a>
                    {{ cart.quantity }}
                    <a href="{% url 'App_Order:increase' pk=cart.item.pk %}" class="mr-2"><span class="badge badge-light">
                        <i class="fas fa-plus"></i>
                    </span></a>
                </td>




12. prement app declare:
        i. > py manage.py startapp App_Payment

        ii. create folder in templates:
               App_Payment 

        iii. add App_Payment in settings.py:


        iv. create it's urls.py file:

        v. add link in main urls.py:
                path('payment/', include("App_Payment.urls")),

        vi. App_Payment\urls.py:
                from django.urls import path

                app_name = "App_Payment"

                        urlpatterns = [

                ]


        vii. payment app models:
        // App_Payment\models.py:

                from dataclasses import field
                from django.db import models
                from django.conf import settings

                # Create your models here.


                class BillingAddress(models.Model):
                user = models.ForeignKey(settings.AUTH_USER_MODEL,
                                        on_delete=models.CASCADE)
                address = models.CharField(max_length=264, blank=True)
                zipcode = models.CharField(max_length=10, blank=True)
                city = models.CharField(max_length=30, blank=True)
                country = models.CharField(max_length=20, blank=True)

                def __str__(self):
                        return f'{self.user.profile.username} billing address'

                def is_fully_filled(self):
                        field_names = [f.name for f in self._meta.get_fields()]
                        for field_name in field_names:
                        value = getattr(self, field_name)
                        if value is None or value == '':
                                return False
                        return True

                class Meta:
                        verbose_name_plural = "Billing Addresses"


        viii. make migration:
        > py manage.py makemigrations App_Payment
        > py manage.py migrate



// now write view:


        //but before, create form file
        // billing address form:
        ix.forms.py:
                from django import forms
                from App_Payment.models import BillingAddress

                class BillingForm(forms.ModelForm):
                     class Meta:
                        model = BillingAddress
                        fields = ['address', 'zipcode', 'city', 'country']
                        

        x. App_Payment\views.py:
        // user billing address view:

                from django.shortcuts import render, HttpResponseRedirect

                # models and forms
                from App_Order.models import Order
                from App_Payment.forms import BillingAddress
                from App_Payment.forms import BillingForm

                #
                from django.contrib.auth.decorators import login_required

                # Create your views here.


                @login_required
                def checkout(request):
                saved_address = BillingAddress.objects.get_or_create(user=request.user)

                return render(request, 'App_Payment/checkout.html', context={})        
        

        xi. create a template:
                // templates\App_Payment\checkout.html:


        xii. define urlpatterns:
        // App_Payment\urls.py:
                path('checkout/', views.checkout, name="checkout"),


        xiii. add this checkout in App_Order\cart.html:
                    <a href="{% url 'App_Payment:checkout' %}" class="btn btn-success mr-4">Procced To Checkout</a>


        xiv: add form in views.py:
        @login_required
        def checkout(request):
                saved_address = BillingAddress.objects.get_or_create(user=request.user)
                # tuple to object convert:
                saved_address = saved_address[0]
                form = BillingForm(instance=saved_address)
                if request.method == "POST":
                        form = BillingForm(request.POST, instance=saved_address)
                        if form.is_valid():
                        form = BillingForm(instance=saved_address)

                return render(request, 'App_Payment/checkout.html', context={'form':form})




        // form generate:
        xv. checkout.html:

                {% extends 'base.html' %}
                {% load crispy_forms_tags %}
                {% block body_block %}
                <div class="container mt-5">
                <h2 class="mb-3">
                        Shipping Address > <span class="text-muted">Checkout</span>
                </h2>
                <div class="row">
                        <div class="col-md-9">
                        <div class="card mb-5" style="height: auto">
                                <div class="card-body">
                                <form method="POST">
                                        {{form|crispy}}
                                        {% csrf_token %}
                                        <button type="submit" class="btn btn-primary float-right">Save Address</button>
                                </form>
                                </div>
                        </div>
                        </div>
                </div>
                </div>

                {% endblock %}


        xvi. sent a message from views.py:
                messages.success(request, f"Shipping Address Saved!")
        

// save from data in database:
        xvii. views.py:

                @login_required
                def checkout(request):
                        saved_address = BillingAddress.objects.get_or_create(user=request.user)
                        # tuple to object convert:
                        saved_address = saved_address[0]
                        print(saved_address)
                        form = BillingForm(instance=saved_address)
                        if request.method == "POST":
                                form = BillingForm(request.POST, instance=saved_address)
                                if form.is_valid():
->                              form.save()
                                form = BillingForm(instance=saved_address)
                                messages.success(request, f"Shipping Address Saved!")

                        return render(request, 'App_Payment/checkout.html', context={'form': form})



// here display order summery (in checkout page):
        xviii. views.py":



                @login_required
                def checkout(request):
                        saved_address = BillingAddress.objects.get_or_create(user=request.user)
                        # tuple to object convert:
                        saved_address = saved_address[0]
                        print(saved_address)
                        form = BillingForm(instance=saved_address)
                        if request.method == "POST":
                                form = BillingForm(request.POST, instance=saved_address)
                                if form.is_valid():
                                form.save()
                                form = BillingForm(instance=saved_address)
                                messages.success(request, f"Shipping Address Saved!")

                        order_qs = Order.objects.filter(user=request.user, ordered=False)
                        print(order_qs)
                        order_items = order_qs[0].orderitems.all()
                        print(order_items)
                        order_total = order_qs[0].get_totals()

                        return render(request, 'App_Payment/checkout.html', context={'form': form, 'order_items': order_items, 'order_total': order_total})



        xix. checkout.html > div:
                <div class="col-md-3">
                    <div class="card" style="height: auto">
                        <div class=card-body>
                                <ul class="list-group list-group-flush">
                                        {% for order_item in order_items %}
                                        <li class="list-group-item">{{ order_item.item.name }} X {{order_item.quantity}}</li>
                                        {% endfor %}
                                </ul>
                        </div>
                        <div class="card-footer">
                                <span class="float-left"><b>Order Total</d></span>
                                <span class="float-right"><b>&#2547; {{order_total|floatformat:2}}</b></span>
                        </div>
                    </div>
                </div>



13. add Payment button:
// pre condition is: must fillup all Shipping Address fields:
        i. views.py:
        // send saved_address

                    return render(request, 'App_Payment/checkout.html', context={'form': form, 'order_items': order_items, 'order_total': order_total, 'saved_address': saved_address})

        ii. checkout.html:
        {% if saved_address.is_fully_filled %}
            <a href="" class="btn btn-warning btn-md">Make Payment</a>
            {% else %}
            <div class="alert alert-info">
                <p>Please fill up all the information to make payment.</p>
            </div>
        {% endif %}


-----------------------------------------------
// payment handle: SSL commerz
// here we show demo payment:
https://developer.sslcommerz.com/
        here sign up,
        and get Store ID: 
        Store Password (API/Secret Key):       

connect with SSLcommerz:
        install:        pip install sslcommerz-python


        for RESTAPI:
        install: pip install requests
-----------------------------------------------
Proble fix:
        there was a problem to insall SSLcommerz:
        error: subprocess-exited-with-error

        because of python version:
        so i change python version and install python 3.8.10
        > python --version
                Python 3.8.10
        then create environment env with python 3.8 version:
        > py -3.8 -m venv env

        then activate env:
        > env\Scripts\activate

        then install SSLcommerz:
        > pip install sslcommerz-python==0.0.5
        
        ---------------------------------------
        > pip list:

                Package           Version
                ----------------- ----------
                astroid           2.3.3
                certifi           2019.11.28
                chardet           3.0.4
                idna              2.8
                isort             4.3.21
                lazy-object-proxy 1.4.3
                mccabe            0.6.1
                pip               21.1.1
                requests          2.22.0
                setuptools        56.0.0
                six               1.13.0
                sslcommerz-python 0.0.5
                typed-ast         1.4.0
                urllib3           1.25.7
                wrapt             1.11.2


        now i have to install others requirements files:
        > pip install -r requirements.txt

===============================================================




14. setup SSL:
        i. views.py:

                from django.shortcuts import render, HttpResponseRedirect, redirect


                # for payment
                import requests
                from sslcommerz_python.payment import SSLCSession
                from decimal import Decimal
                import socket

                # payment view:
                @login_required
                def payment(request):
                        saved_address = BillingAddress.objects.get_or_create(user=request.user)
                        saved_address = saved_address[0]
                        if not saved_address.is_fully_filled():
                                messages.info(request, f"Please complete shipping address!")
                                return redirect("App_Payment:checkout")

                        if not request.user.profile.is_fully_filled():
                                messages.info(request, f"Please complete profile details!")
                                return redirect("App_Login:profile")

                        return render(request, "App_Payment/payment.html", context={})


        ii. create templates\App_Payment\payment.html:

        iii. define its path in urls.py:
                 path('pay/', views.payment, name="pay"),

        iv. checkout.html:
            <a href="{% url 'App_Payment:pay' %}" class="btn btn-warning btn-md">Make Payment</a>



SSLcommerz doc:
        https://developer.sslcommerz.com/doc/v4/

15. start payment process:

// before prement process-
        keep data Secret:
        i. create .env file and keep all keys here
        and install: 
                python-decouple

        ii. views.py:
                # 1st
                store_id = config('Store_ID')
                API_key = config('API_Key')
                mypayment = SSLCSession(sslc_is_sandbox=True,
                                        sslc_store_id=store_id, sslc_store_pass=API_key)

        iii. create: templates\App_Payment\complete.html:

        iv. write a view form complete.html
        // views.py:
                @login_required
                def complete(request):
                    render(request, "App_Payment/complete.html", context={})

        v. define its urls pattern:
                path('status/', views.complete, name="complete"),


        // now pass set_url in view:
        // automatic call urls:
        vi. views.py > payment:   
                # 2nd
                status_url = request.build_absolute_uri(reverse("App_Payment:complete"))
                print(status_url)
                mypayment.set_urls(success_url=status_url, fail_url=status_url,
                                cancel_url=status_url, ipn_url=status_url)      

                        
                # 3rd
                order_qs = Order.objects.filter(user=request.user, ordered=False)
                order_items = order_qs[0].orderitems.all()
                order_items_count = order_qs[0].orderitems.count()
                order_total = order_qs[0].get_totals()

                mypayment.set_product_integration(total_amount=Decimal(order_total), currency='BDT', product_category='Mixed',
                                                product_name=order_items, num_of_item=order_items_count, shipping_method='Courier', product_profile='None')

                # 4th
                current_user = request.user
                mypayment.set_customer_info(name=current_user.profile.full_name, email=current_user.email, address1=current_user.profile.address_1,
                                                address2=current_user.profile.address_1, city=current_user.profile.city, postcode=current_user.profile.zipcode, country=current_user.profile.country, phone=current_user.profile.phone)

                mypayment.set_shipping_info(shipping_to=current_user.profile.full_name, address=saved_address.address,
                                                city=saved_address.city, postcode=saved_address.zipcode, country=saved_address.country)


                # 5th
                response_data = mypayment.init_payment()
                print(response_data)



        vi. now redirect to GatewayPageURL
                    return redirect(response_data['GatewayPageURL'])

        // now it will go to SSLcommerz site...



16. csrf verification, cancel:
        i. views.py:
                from django.views.decorators.csrf import csrf_exempt
                        // it will not check csrf


                @csrf_exempt
                def complete(request):
                        if request.method == 'POST' or request.method == 'post':
                                payment_data = request.POST
                        # print(payment_data)
                        # print(payment_data['status'])
                                status = payment_data['status']
                                val_id = payment_data['val_id']
                                tran_id = payment_data['tran_id']
                                bank_tran_id = payment_data['bank_tran_id']
                                if status == 'VALID':
                                        messages.success(request, f"Your Payment Completed Successfully")
                                        elif status == 'FAILED':
                                        messages.warning(
                                                request, f"Your Payment Failed! Please Try Again!")

                        return render(request, "App_Payment/complete.html", context={})


------------------------------------------------------
NOTE:
        dot(.) diye template e value pabo
        data['key'] diye view/django te value pabo
------------------------------------------------------



17. payment complete template design:
        i. complete.html:
                // it's data come from extral, 
                        // it will not support authenticate user 
                        // so show it as extral page


                <!doctype html>
                <html lang="en">
                <head>
                <meta charset="utf-8">
                <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

                <!-- auto redirect to homepage -->
                <meta http-equiv="refresh" content="5; url={% url 'App_Shop:home' %}">

                <!-- Bootstrap CSS -->
                <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">

                <title>{% block title_block %} Payment Status {% endblock%}</title>

                </head>
                <body>
                <div class="container">
                <div class="messages container mt-2">
                        {% if messages %}
                        {% for message in messages%}
                        <div {% if message.tags %} class="alert alert-{{message.tags}}{% endif %}" role="alert">
                        {{message}}
                        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        </div>
                        {% endfor %}
                        {% endif %}
                </div>
                </div>


                
                <script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
                <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN" crossorigin="anonymous"></script>
                <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.min.js" integrity="sha384-+sLIOodYLS7CIrQpBjl+C7nPvqq+FbNUBDunl/OZv93DB7Ln/533i8e/mZXLi/P+" crossorigin="anonymous"></script>
                
                </body>
                </html>

        ii. views.py:
                @csrf_exempt
                def complete(request):
                if request.method == 'POST' or request.method == 'post':
                        payment_data = request.POST
                        # print(payment_data)
                        # print(payment_data['status'])
                        status = payment_data['status']

                        if status == 'VALID':
                        val_id = payment_data['val_id']
                        tran_id = payment_data['tran_id']
                        messages.success(request, f"Your Payment Completed Successfully")
                        elif status == 'FAILED':
                        messages.warning(
                                request, f"Your Payment Failed! Please Try Again!")

                return render(request, "App_Payment/complete.html", context={})


// purchased hoyar por cart empty korbo:
        iii. views.py:
        @login_required
        def purchase(request, val_id, tran_id):
                return HttpResponseRedirect(reverse("App_Shop:home"))
        

        iv. urls.py:
                path('purchase/<val_id>/<tran_id>/', views.purchase, name="purchase"),

        v. views.py:

                @login_required
                def purchase(request, val_id, tran_id):
                        order_qs = Order.objects.filter(user=request.user, ordered=False)
                        order = order_qs[0]
                        orderId = tran_id
                        order.ordered = True
                        order.orderId = orderId
                        order.paymentId = val_id
                        order.save()
                        cart_items = Cart.objects.filter(user=request.user, purchased=False)
                        for item in cart_items:
                                item.purchased = True
                                item.save()

                        return HttpResponseRedirect(reverse("App_Shop:home"))


18. navbar Order:
        (previous order, payment)

        i. create templates\App_Payment\order.html:

        ii. views.py:
                @login_required
                def order_view(request):
                        try:
                                orders = Order.objects.filter(user=request.user, ordered=True)
                                context = {"orders": orders}
                        except:
                                messages.warning(request, "You have no an active order")
                                return redirect("App_shop:home")

                        return render(request, "App_Payment/order.html", context={})
        
        iii. urls pattern define:
                path('orders/', views.order_view, name="orders"),

        iv. navbar.html:
                        <a class="dropdown-item" href="{% url 'App_Payment:orders' %}">Orders</a>

        v. order.html:

                {% extends 'base.html' %}
                {% block body_block %}

                <div class="container mt-5">
                <h2 class="text-center"><strong>Your Orders</strong></h2>
                <div class="row">
                        <div class="col-md-12">
                        <div class="card mt-5" style="height:auto">
                                <div class="table-responsive">
                                <table class="table">
                                        <thead>
                                        <tr>
                                                <th scope="col">#</th>
                                                <th scope="col">Order Id</th>
                                                <th scope="col">Products</th>
                                                <th scope="col">Status</th>
                                        </tr>
                                        </thead>
                                        <tbody>
                                        {% for order in orders %}
                                        <tr>
                                                <th scope="row">{{ forloop.counter }}</th>
                                                <td><a href="#">{{ order.orderId}}</a></td>
                                                <td>
                                                {% for item in order.orderitems.all %} {{item}} <br> {% endfor %}
                                                </td>
                                                <td><span class="badge badge-primary">Processing Your Order</span></td>
                                        </tr>
                                        {% endfor %}
                                        </tbody>
                                </table>
                                </div>
                        </div>
                        </div> 
                        <div class="col-md-12 my-5 text-center">
                                <a href="{% url 'App_Shop:home' %}">Back to Home</a>
                        </div>
                </div>
                </div>
                {% endblock %}


// complete project...