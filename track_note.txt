1. Project setup:
    i.  create project:
            > django-admin startproject My_Ecom_Project

    ii. create virtual enviroment in CMD:
            python -m venv env
            env\Scripts\activate

    iii. create & install requirements.txt:
            > pip install -r requirements.txt
    
    iv. create folder: templates, media, static
        and add them in settings.py:

                TEMPLATES_DIR = os.path.join(BASE_DIR, 'templates')
                STATIC_DIR = os.path.join(BASE_DIR, 'static')
                MEDIA_DIR = os.path.join(BASE_DIR, 'media')

        
                'DIRS': [TEMPLATES_DIR, ],

                TIME_ZONE = 'Asia/Dhaka'



                STATIC_URL = '/static/'
                STATICFILES_DIR = [STATIC_DIR, ]

                MEDIA_ROOT = MEDIA_DIR
                MEDIA_URL = '/media/'

                LOGIN_URL = '/'


    v. crispy_forms at in settings.py:
            INSTALLED_APPS = [
                'crispy_forms',
        ]

        CRISPY_TEMPLATE_PACK = 'bootstrap4'


    vi. create app:
            > py manage.py startapp App_Login
            > py manage.py startapp App_Shop 
    
    vii. add them in settings.py:
            INSTALLED_APPS = [
                'App_Login',
                'App_Shop',
        ]
   
    viii. templates directory:
        create two folder:
                a. App_Login
                b. App_Shop


    ix. create base.html and navbar.html:


    x. create in static folder:  
        // here create file main.css

    
    xi. main urls.py:

                from django.urls import path, include

                # TO show media files
                from django.conf import settings
                from django.contrib.staticfiles.urls import static, staticfiles_urlpatterns


                urlpatterns += staticfiles_urlpatterns()
                urlpatterns += static(settings.MEDIA_URL, decument_root=settings.MEDIA_ROOT)


    xii. create urls.py in both apps:
        a. App_Login\urls.py:
                from django.urls import path

                app_name = 'App_Login'

                urlpatterns = [

                ]

        b.App_Shop\urls.py:
                from django.urls import path

                app_name = 'App_Shop'

                urlpatterns = [
                
                ]


    xiii. indicate them in main urls.py:
            path('', include('App_Shop.urls')),
            path('account/', include('App_Login.urls')),


2. App_Login\models.py
    // building model, rewrite:

                from django.db import models

                # To Create a Custom User Model and Admin Panel
                from django.contrib.auth.models import BaseUserManager, AbstractBaseUser, PermissionsMixin
                from django.utils.translation import ugettext_lazy


                # TO automatically created one to one objects
                from django.db.models.signals import post_save
                from django.dispatch import receiver


                # Create your models here.


                class MyUserManager(BaseUserManager):
                """ A custom Manage to deal with emails as unique identifer """

                        def _create_user(self, email, password, **extra_fields):
                                """ Creates and saves a user with a given email and password """

                                if not email:
                                raise ValueError("The Email must be set!")

                                email = self.normalize_email(email)
                                user = self.model(email=email, **extra_fields)
                                user.set_password(password)
                                user.save(using=self._db)
                                return user

                        """ Super user create """

                        def create_superuser(self, email, password, **extra_fields):
                                extra_fields.setdefault('is_staff', True)
                                extra_fields.setdefault('is_superuser', True)
                                extra_fields.setdefault('is_active', True)

                                if extra_fields.get('is_staff') is not True:
                                raise ValueError('Superuser must have is_staff=True')
                                if extra_fields.get('is_superuser') is not True:
                                raise ValueError('Superuser must have is_superuser=True')
                                return self._create_user(email, password, **extra_fields)


                """user models where we save user """


                class User(AbstractBaseUser, PermissionsMixin):
                        email = models.EmailField(unique=True, null=False)
                        is_staff = models.BooleanField(
                                ugettext_lazy('staff status'),
                                default=False,
                                help_text=ugettext_lazy(
                                'Designates whether the user can log in this site')
                        )

                        is_active = models.BooleanField(
                                ugettext_lazy('active'),
                                default=True,
                                help_text=ugettext_lazy(
                                'Designates whether this user should be trated as active. Unselect this instead of deleting accounts')
                        )

                        USERNAME_FIELD = 'email'
                        objects = MyUserManager()

                        # string replasentation
                        def __str__(self):
                                return self.email

                        def get_full_name(self):
                                return self.email

                        def get_short_name(self):
                                return self.email

                        """User model is ready """


                        class Profile(models.Model):
                        user = models.OneToOneField(
                                User, on_delete=models.CASCADE, related_name='profile')
                        username = models.CharField(max_length=264, blank=True)
                        full_name = models.CharField(max_length=264, blank=True)
                        address_1 = models.TextField(max_length=300, blank=True)
                        city = models.CharField(max_length=40, blank=True)
                        zipcode = models.CharField(max_length=10, blank=True)
                        country = models.CharField(max_length=50, blank=True)
                        phone = models.CharField(max_length=20, blank=True)
                        date_joined = models.DateTimeField(auto_now_add=True)

                        # when new user create, here profile automatically create_default_context

                        # string representation
                        def __str__(self):
                                return self.username + "'s Profile"

                        def is_fully_filled(self):
                                fields_names = [f.name for f in self._meta.get_fields()]

                                for field_name in fields_names:
                                value = getattr(self, field_name)
                                if value is None or value == '':
                                        return False
                                return True


                # when user create, then user model will automatically created and linked each other:


                @receiver(post_save, sender=User)
                def create_profile(sender, instance, created, **kwargs):
                if created:
                        Profile.objects.create(user=instance)


                @receiver(post_save, sender=User)
                def save_profile(sender, instance, **kwargs):
                instance.profile.save()






/ run now first time migration:


        ii. register model in App_Login\admin.py:
                from App_Login.models import User, Profile

                # Register your models here.

                admin.site.register(User)
                admin.site.register(Profile)


        iii. settings.py: // change user model
        # Custom user model
        AUTH_USER_MODEL = 'App_Login.User'


        iv. now run migration:
                > py manage.py makemigrations App_Login
                > py manage.py migrate


        v. now create a super user:
                > py manage.py createsuperuser
                        Email: asadujjaman255@gmail.com
                        Password: 1234
                        Password (again):
                        This password is too short. It must contain at least 8 characters.
                        This password is too common.
                        This password is entirely numeric.
                        Bypass password validation and create user anyway? [y/N]: y
                        Superuser created successfully.


// now login admin site:
> py manage.py runserver
http://127.0.0.1:8000/admin
        // here we can provide Username
                and see the changes









